WHILE true
  Display prompt (e.g., "minishell$ ")
  READ user input (using getline or equivalent)
  
  IF input is EOF (Ctrl-D):
    EXIT the shell
  
  IF input is empty:
    CONTINUE to next iteration
  
  ADD input to history_list

  PARSE input into tokens (handle quotes, pipes, redirections)

  IF input contains environment variables ($VAR):
    EXPAND environment variables using getenv()
  
  IF input is a built-in command:
    EXECUTE the built-in command
    CONTINUE to next iteration

  IF input contains a pipeline:
    EXECUTE commands connected by pipes
    UPDATE last_exit_status
    CONTINUE to next iteration

  EXECUTE external command:
    - SEARCH for the executable in PATH
    - HANDLE relative or absolute paths
    - SPAWN a child process using fork()
    - EXECUTE the command using execvp()
    - WAIT for the command to finish
    - UPDATE last_exit_status

END WHILE



//////////////////////

PARSING INPUT....

PARSE input:
  - SPLIT input by whitespace, considering quotes and special characters
  - HANDLE single quotes (''):
      - Ignore interpretation of all meta-characters inside the quotes
  - HANDLE double quotes (""):
      - Ignore interpretation of meta-characters except for $
  - HANDLE redirections (<, >, <<, >>):
      - STORE redirection operators and corresponding file paths
  - HANDLE pipes (|):
      - SPLIT commands by pipes
  RETURN parsed commands and tokens



////////////////////////

EXECUTE builtin commands....

IF command is "echo":
  HANDLE "-n" option
  PRINT arguments to stdout

IF command is "cd":
  CHANGE current working directory to the specified path
  HANDLE errors (e.g., non-existent path)

IF command is "pwd":
  PRINT current working directory

IF command is "export":
  ADD environment variable to the shell environment

IF command is "unset":
  REMOVE environment variable from the shell environment

IF command is "env":
  PRINT all environment variables

IF command is "exit":
  TERMINATE the shell with the provided exit status (or 0)



///////////////////////////////////////



HANDLE redirections:
  - IF "<":
      OPEN specified file for reading
      REPLACE stdin with the file descriptor
  - IF ">":
      OPEN specified file for writing (truncate if exists)
      REPLACE stdout with the file descriptor
  - IF ">>":
      OPEN specified file for writing (append mode)
      REPLACE stdout with the file descriptor
  - IF "<<":
      READ input until the specified delimiter is encountered
      STORE input as a temporary file or in memory
      REPLACE stdin with the temporary content



//////////////////////////



HANDLE pipelines:
  FOR each command in the pipeline:
    CREATE a pipe
    FORK a child process
      - IN CHILD:
          - CONNECT the pipe's read or write ends to stdin or stdout as needed
          - EXECUTE the command
      - IN PARENT:
          - CLOSE unused pipe ends
          - WAIT for the child process
  UPDATE last_exit_status based on the final command in the pipeline





/////////////////////////




HANDLE signals:
  IF SIGINT (Ctrl-C):
    - PRINT a new prompt on a new line
    - DO NOT terminate the shell

  IF SIGQUIT (Ctrl-\):
    - IGNORE the signal

  IF EOF (Ctrl-D):
    - TERMINATE the shell gracefully





///////////////////////////



HANDLE environment variables:
  - REPLACE "$VAR" in the input with the value of VAR from the environment
  - HANDLE "$?" by replacing it with last_exit_status

UPDATE environment:
  - USE setenv() and unsetenv() to manage environment variables



////////////////////////////



HANDLE errors:
  - PRINT descriptive error messages for:
      - Command not found
      - Permission denied
      - File or directory not found
  - RETURN appropriate exit statuses




///////////////////////////


EXIT SHELL....

CLEANUP resources (e.g., free memory, close file descriptors)
PRINT exit message (optional)
EXIT with the last_exit_status
